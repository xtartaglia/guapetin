[{"C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\index.js":"1","C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\reportWebVitals.js":"2","C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\App.js":"3","C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\Domanda.js":"4"},{"size":500,"mtime":1644746501993,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":30548,"mtime":1675097309807,"results":"8","hashOfConfig":"6"},{"size":2078,"mtime":1646189509724,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1yhiv0p",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\index.js",[],[],[],"C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\reportWebVitals.js",[],[],"C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],[],"import Matter, { Body, Composite, Bodies } from 'matter-js'\nimport { useEffect, useRef, useState } from 'react'\nimport Domanda from './Domanda'\nimport doggo from './doggo.png'\nimport win from './i-ruv-you-1.mp3'\nimport jump from './jump.mp3'\nimport domande from './domande.json'\nimport { fabric } from 'fabric'\nimport './App.css'\nimport './fullscreen.css'\nimport earth from './ground.png'\nimport gO from './game over.mp3'\nimport doggoLove from './doggo_love.png'\nimport doggoSad from './doggo_sad.png'\nimport doggoDead from './doggo_dead.png'\nimport wrong from './wrong.wav'\nimport swal from 'sweetalert2'\nimport purupu from './purupuu2.mp3'\nimport loveComp from './lovecomp1.png'\nimport pouroupou from './pouroupou.png'\nimport cancion from './cancion.mp3'\n\nconst rightAnswer = new Event('rightanswer')\nvar rispostaGiusta;\nvar volume = 1\nvar guapeton = true;\nvar jumpSound\nvar cumpleYaFestejado\n\n\nvar estreno = new Date('March 10, 2022')\nvar hoy = new Date()\n\nif (hoy.getTime() > estreno.getTime()) {\n  cumpleYaFestejado = true\n}\n\nelse {\n  cumpleYaFestejado = false\n}\n\nfunction decodeThatShit(str) {\n  str = decodeURI(str)\n\n  str = str.replace(\"%3F\", \"?\")\n  str = str.replace(\"%2F\", \"/\")\n  str = str.replace(\"%2C\", \",\")\n  str = str.replace(\"%3A\", \":\")\n  str = str.replace(\"%26\", \"&\")\n\n  return str\n}\n\nfunction ordinare(data) {\n  var newDomanda = {}\n  var qst;\n\n  for (var i = 0; i < data.results.length; i++) {\n\n\n    newDomanda[\"domanda\" + i] = {\n      d: decodeThatShit(data.results[i].question)\n    }\n\n    newDomanda[\"domanda\" + i].r0 = {\n      r: decodeThatShit(data.results[i].correct_answer),\n      giusto: true\n    }\n\n    for (var j = 0; j < data.results[i].incorrect_answers.length; j++) {\n      newDomanda[\"domanda\" + i][\"r\" + (j + 1)] = {\n        r: decodeThatShit(data.results[i].incorrect_answers[j]),\n        giusto: false\n      }\n\n\n\n    }\n\n  }\n\n  return newDomanda\n}\n\nconst getQuestions = async () => {\n  try {\n    var response = await fetch('https://opentdb.com/api.php?amount=10&difficulty=medium&encode=url3986');\n    var data = await response.json();\n    var questions = ordinare(data)\n\n    questions = shuffleDomande(questions)\n\n\n\n  } catch (e) {\n\n  }\n\n  return questions\n}\n\nfunction createImage(string, w, h, type, color, specW) {\n\n  var canvas = new fabric.Canvas()\n  var size;\n  var fontFamily = 'Arial'\n  var fill\n  var breakwords\n  fill = 'white'\n\n  canvas.width = w\n  canvas.height = h\n\n  if (type === 0) {\n    size = 30\n  }\n\n  else if (type === 1) {\n    size = 20\n    breakwords = false\n  }\n\n  else if (type === 2) {\n    size = 1000\n    breakwords = false\n  }\n\n  else if (type === 3) {\n    size = 20\n    breakwords = true\n  }\n\n  var words = string.split(' ')\n  var sizes = []\n\n  for (var i = 0; i < words.length; i++) {\n    var graphText = new fabric.Text(words[i], {\n      fontSize: size,\n      fontFamily: fontFamily,\n      fontWeight: 'bold',\n      fill: fill,\n      breakWords: breakwords\n    })\n\n    while (graphText.width > canvas.width) {\n      graphText.set({ fontSize: graphText.fontSize - 1 })\n    }\n    //Math.min doesn't work if more values are equal\n    if (!sizes.includes(graphText.fontSize)) {\n      sizes.push(graphText.fontSize)\n    }\n  }\n\n  size = Math.min.apply(null, sizes)\n\n\n\n  var limit = canvas.height;\n\n  var text = new fabric.Textbox(string);\n  // set initial values\n  text.set({\n    width: canvas.width * 0.75,\n    textAlign: 'center',\n    fontFamily: fontFamily,\n    fontWeight: 'bold',\n    fontSize: size,\n    fill: 'white',\n    breakWords: breakwords\n  });\n\n  if (typeof specW === 'undefined') {\n    //text.set({width : canvas.width})\n\n  }\n  if (typeof color !== 'undefined') {\n    text.backgroundColor = color\n  }\n  while (text.width > canvas.width) {\n    text.set({ width: text.width - 10 });\n  }\n  while (text.height > limit) {\n    text.set({ fontSize: text.fontSize - 1 });\n  }\n\n  canvas.add(text)\n  canvas.centerObject(text)\n\n  return canvas.toDataURL(\"image/png\");\n}\n\nfunction getAnswers(q, screenHeight, screenWidth, playerPos, groundHeight, scale) {\n  let r = Object.keys(q)\n  let rgraph = Composite.create()\n  var pos\n  var type\n\n  if (screenWidth < screenHeight) {\n    pos = playerPos + screenWidth / 3\n    type = 1\n  }\n\n  else {\n    pos = playerPos + screenWidth / 3\n    type = 0\n  }\n\n  for (let i = 0; i < r.length - 1; i++) {\n    var sprite = createImage(q[\"r\" + i].r, 200 * 4 / 3, (screenHeight - groundHeight) / 4.5 * 0.6, type)\n    if (q[\"r\" + i].giusto) {\n      rispostaGiusta = {\n        r: q[\"r\" + i].r,\n        pos: (2 * i + 1) * (screenHeight - groundHeight) / (2 * r.length - 1) + (screenHeight - groundHeight) / (2 * r.length - 1) / 2\n      }\n    }\n    var ans = Bodies.rectangle(pos, (2 * i + 1) * (screenHeight - groundHeight) / (2 * r.length - 1) + (screenHeight - groundHeight) / (2 * r.length - 1) / 2, 200, (screenHeight - groundHeight) / 4.5 * 0.6, { isStatic: true, isSensor: true, render: { sprite: { texture: sprite } } })\n    ans.collisionFilter = {\n      'group': -1,\n      'category': 2,\n      'mask': 0,\n    }\n    Composite.add(rgraph, [ans])\n  }\n\n  return rgraph;\n}\n\nfunction shuffle(obj, excl) {\n  var shuffledObj = {}\n  var objArray = Object.keys(obj)\n  var rArray = []\n\n  for (var i = 0; i < Object.keys(obj).length; i++) {\n\n    if (i === excl) {\n      shuffledObj[Object.keys(obj)[i]] = obj[objArray[i]]\n\n      objArray.splice(i, 1)\n    }\n\n    else {\n      var random = Math.floor(Math.random() * objArray.length)\n\n      shuffledObj[Object.keys(obj)[i]] = obj[objArray[random]]\n\n\n      rArray.push(obj[objArray[random]])\n      objArray.splice(random, 1)\n    }\n  }\n\n\n  return shuffledObj;\n}\n\nfunction shuffleDomande(obj) {\n  for (var i = 0; i < Object.keys(obj).length; i++) {\n    obj[Object.keys(obj)[i]] = shuffle(obj[Object.keys(obj)[i]], 0)\n  }\n  for (i = 0; i < Object.keys(obj).length; i++) {\n    obj = shuffle(obj)\n  }\n\n  return obj\n}\n\n\nexport default function App(props) {\n  const scena = useRef()\n  let resize = false\n  let gameOver = true\n  let j = 0\n  let won = false\n  var punteggio = 0\n  var l = 0\n  var checkedWon = false\n  var conto\n  var noClick = true\n  var justStarted = true\n  var alreadyTouched = false\n  var mov = -3\n  var fullscreen = false\n  var player\n  var ground\n  var punti\n  var started = false\n  var voluntary = false\n\n\n  const [scale, setScale] = useState(window.screen.height / 850)\n  const [scaleX, setScaleX] = useState(1 / window.devicePixelRatio)\n\n  useEffect(() => {\n    var Engine = Matter.Engine,\n      World = Matter.World,\n      Render = Matter.Render,\n      Bodies = Matter.Bodies,\n      Runner = Matter.Runner,\n      Events = Matter.Events\n\n    var engine = Engine.create({\n    })\n\n    engine.timing.isFixed = true\n\n    var domanda;\n    var qr;\n    var type;\n    var speed\n\n    var render = Render.create({\n      element: scena.current,\n      engine: engine,\n      options: {\n        width: window.screen.width,\n        height: window.screen.height + window.screenTop,\n        wireframes: false,\n        background: 'transparent',\n        pixelRatio: 'auto'\n      }\n    })\n\n    ground = Bodies.rectangle(window.screen.width / 2, window.screen.height - window.screen.height / 25, window.screen.width * 1.5, window.screen.height / 12.5, { isStatic: true, render: { sprite: { texture: earth, xScale: window.screen.width * 1.5 / 2400, yScale: window.screen.height / 12.5 / 150 } } });\n    Composite.add(engine.world, [ground])\n\n    try {\n      var newRule = document.styleSheets[0].cssRules[3].cssText.replace(\"-2750px\", \"-\" + window.screen.height * 2750 / 580 + \"px\")\n      document.styleSheets[0].deleteRule(3)\n      document.styleSheets[0].insertRule(newRule, 3)\n    }\n\n    catch (error) {\n      console.error(error)\n    }\n\n    swal.fire({\n      title: \"Guapet√≠n\",\n      html: \"Guapet√≠n stava volando tutto tranquillo quando si ritrov√≤ tutto ad un tratto dentro a una tempesta di nuvole tossiche üò±<br>Evita le nuvole per salvare Guapet√≠n e rispondi alle domande per accumulare punti.<br>In bocca al purup√π√π√π<br><br><input type=checkbox id='audio' name='audio'><label for='audio'>Disattivare l'audio?</label><br><input type=checkbox id='guepet' name='audio'><label for='guepet'>Sei un guapet√≥n?</label>\",\n      icon: \"info\",\n      confirmButtonText: 'Daje annamoooooo',\n      confirmButtonColor: '#5ca353',\n      color: 'white',\n      background: '#373737',\n      allowOutsideClick: false,\n      preConfirm: function () {\n        return new Promise((resolve, reject) => {\n          // get your inputs using their placeholder or maybe add IDs to them\n          resolve({\n            isMuted: document.getElementById(\"audio\").checked,\n            guepet: document.getElementById(\"guepet\").checked\n          });\n\n          // maybe also reject() on some condition\n        });\n      }\n    })\n      .then((data) => {\n        if (data.value.isMuted) {\n\n          volume = 0\n\n        }\n        else {\n\n\n        }\n\n        if (!data.value.guepet) {\n          (async () => {\n            guapeton = false\n            if (cumpleYaFestejado) {\n              domande = await getQuestions()\n            }\n            else {\n              setTimeout(()=>{\n                var canzone = document.querySelector(\".cancion\")\n                canzone.play()\n              },60000)\n            }\n            jumpSound = \".jump\"\n            document.body.requestFullscreen()\n          })()\n        }\n        else {\n          guapeton = true\n          jumpSound = \".purupu\"\n          document.body.requestFullscreen()\n          setTimeout(()=>{\n            var canzone = document.querySelector(\".cancion\")\n            canzone.play()\n          },60000)\n        }\n      })\n\n    function fullscreenChange(event) {\n      if (document.fullscreenElement) {\n\n        window.screen.orientation.lock('portrait')\n\n        if (window.screen.width < window.screen.height) {\n          type = 1\n          speed = 1\n        }\n\n        else {\n          type = 0\n          speed = 1\n        }\n\n        setScale(window.screen.height / 850)\n        fullscreen = true\n        if (!started) {\n\n          start()\n          started = true\n        }\n      }\n\n      else {\n        mov = 0\n        engine.gravity.y = 0\n        if (!voluntary) {\n          swal.fire({\n            title: \"Ci vuoi lasciare?\",\n            html: \"Sei sicuro di voler abbandonare la partita?\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonText: 'Tornare al gioco',\n            confirmButtonColor: '#5ca353',\n            cancelButtonText: 'Abbandonare la partita',\n            color: 'white',\n            background: '#373737',\n            allowOutsideClick: false\n          })\n            .then((result) => {\n              if (result.value === true) {\n                document.body.requestFullscreen()\n                mov = -2\n                if (engine.gravity.y === 0) {\n                  engine.gravity.y = 0.2 * scaleX\n                }\n              }\n\n              else {\n                document.exitFullscreen()\n                swal.fire({\n                  title: \"Se vedemo zi'\",\n                  html: \"Spero il gioco ti sia piaciuto\",\n                  showCancelButton: false,\n                  showConfirmButton: false,\n                  color: 'white',\n                  background: '#373737',\n                  allowOutsideClick: false\n                })\n                gameOver = true;\n                try {\n                  Composite.remove(engine.world, [qr, domanda, punti, conto, player])\n                }\n                catch (error) {\n\n                }\n              }\n            })\n        }\n      }\n    }\n\n    document.addEventListener('fullscreenchange', fullscreenChange)\n    document.addEventListener('resize', fullscreenChange)\n\n\n\n    function handleClick() {\n      if (justStarted && !gameOver && fullscreen) {\n        justStarted = false\n        engine.gravity.y = 0.2 * scaleX\n      }\n\n      if (!gameOver) {\n        var sound = document.querySelector(jumpSound)\n        if (jumpSound === \".jump\") {\n          sound.playbackRate = 2\n          sound.volume = 0.5 * volume\n        }\n        if (volume !== 0) {\n          sound.play()\n        }\n        Body.applyForce(player, { x: player.position.x, y: player.position.y }, { x: 0, y: -1.5 * engine.gravity.y })\n      }\n    }\n\n    function bigBitch() {\n      var mult\n      if (guapeton) {\n        player.render.sprite.texture = pouroupou\n        player.render.sprite.xScale = 0.1\n        player.render.sprite.yScale = 0.1\n        mult = 0.1\n      }\n\n      else {\n        player.render.sprite.texture = doggoLove\n        mult = 1\n      }\n\n      var big = 0\n      var end = setInterval(() => {\n\n        player.render.sprite.xScale += big / 1000 * mult\n        player.render.sprite.yScale += big / 1000 * mult\n\n        if (big === 100) {\n          clearInterval(end)\n        }\n        big++\n      }, 1000 / 60)\n      var gameEnd = document.querySelector(\".purupu\")\n      if (volume !== 0) {\n        gameEnd.play()\n      }\n    }\n\n    function gameIsOver() {\n      document.body.style.animationPlayState = \"paused\"\n      try {\n\n        for (var v = 0; v < document.styleSheets[2].cssRules.length; v++) {\n          var newRule = document.styleSheets[2].cssRules[v].cssText.replace(\"running\", \"paused\")\n          document.styleSheets[2].deleteRule(v)\n          document.styleSheets[2].insertRule(newRule, v)\n        }\n\n      }\n\n      catch (error) {\n\n      }\n\n      var gOSound = document.querySelector(\".gO\")\n      gOSound.volume = 0.5 * volume\n      if (volume !== 0) {\n        gOSound.play()\n      }\n      player.render.sprite.texture = doggoDead\n      gameOver = true\n      started = false\n    }\n\n    function moveBitch() {\n      domanda = Domanda({ screenHeight: window.screen.height, groundHeight: window.screen.height / 12.5, x: player.position.x + 2000, q: domande[\"domanda0\"], scale: scale })\n      Composite.add(engine.world, [domanda])\n\n      qr = Composite.create()\n      var sprite = createImage(domande[\"domanda0\"].d, window.screen.width / 2 * 4 / 3, (window.screen.height / 50 * 49) / 4.5 * 0.3, type)\n      var q = Bodies.rectangle(player.position.x, (window.screen.height / 50 * 49) / 4.5 * 0.3, window.screen.width / 2, (window.screen.height / 50 * 49) / 4.5 * 0.3, { isSensor: true, isStatic: true, render: { sprite: { texture: sprite } } })\n      q.collisionFilter = {\n        'group': -1,\n        'category': 2,\n        'mask': 0\n      }\n      Composite.add(qr, [q])\n      Composite.add(engine.world, [qr])\n      var risp = getAnswers(domande[\"domanda0\"], window.screen.height, window.screen.width, player.position.x, window.screen.height / 12.5, scale)\n      setTimeout(() => {\n        Composite.add(qr, [risp])\n      }, 1000)\n\n      var update = setInterval(() => {\n\n        if (typeof punti != \"undefined\") {\n          Body.setPosition(punti, { x: player.position.x, y: player.position.y - 60 })\n        }\n\n        if (typeof domanda !== \"undefined\" && !gameOver && !alreadyTouched) {\n          Composite.translate(domanda, { x: mov * speed, y: 0 })\n          Body.translate(ground, { x: mov * speed, y: 0 })\n        }\n\n        else if (gameOver) {\n          clearInterval(update)\n          Composite.remove(engine.world, punti)\n        }\n\n        if (ground.position.x < window.screen.width / 4) {\n          Body.setPosition(ground, { x: window.screen.width / 2, y: ground.position.y })\n        }\n\n        var lastChild = Composite.allBodies(domanda)[Composite.allBodies(domanda).length - 1]\n\n        if (player.position.y < -37 / 2) {\n          gameIsOver()\n          setTimeout(() => {\n\n            swal.fire({\n              title: \"NOOOOOOO! Hai fatto uscire Guapet√≠n dallo schermo :(\",\n              html: \"Il tuo punteggio √®: \" + punteggio + \"<br>Chiudi questo messaggio per iniziare una nuova partita\",\n              icon: \"error\",\n              showCancelButton: true,\n              confirmButtonText: 'Daje annamoooooo',\n              confirmButtonColor: '#5ca353',\n              cancelButtonText: '¬°No gracias se√±ora!',\n              color: 'white',\n              background: '#373737',\n              allowOutsideClick: false\n            })\n              .then((result) => {\n\n                if (result.value === true) {\n                  if (!guapeton && cumpleYaFestejado) {\n                    (async () => {\n                      domande = await getQuestions()\n                      start()\n                    })()\n                  }\n\n                  else {\n                    start()\n                  }\n                }\n\n                else {\n                  voluntary = true\n                  document.exitFullscreen()\n                  swal.fire({\n                    title: \"Se vedemo zi'\",\n                    html: \"Spero il gioco ti sia piaciuto\",\n                    showCancelButton: false,\n                    showConfirmButton: false,\n                    color: 'white',\n                    background: '#373737',\n                    allowOutsideClick: false\n                  })\n                  gameOver = true;\n                  try {\n                    Composite.remove(engine.world, [qr, domanda, punti, conto, player])\n                  }\n                  catch (error) {\n\n                  }\n                }\n              })\n\n            alreadyTouched = false\n            player.render.sprite.texture = doggo\n          }, 1000)\n        }\n\n\n        if (lastChild.position.x - 100 < player.position.x + 37 * scale / 2 && !checkedWon) {\n\n          try {\n            if (player.position.y < rispostaGiusta.pos + (window.screen.height - window.screen.height / 12.5) / (2 * Object.keys(domande[\"domanda\" + (j - 1)]).length - 1) && player.position.y > rispostaGiusta.pos - (window.screen.height - window.screen.height / 12.5) / (2 * Object.keys(domande[\"domanda\" + (j - 1)]).length - 1)) {\n              won = true\n\n              var win = document.querySelector(\".win\")\n              win.volume = 0.5 * volume\n              if (volume !== 0) {\n                win.play()\n              }\n              player.render.sprite.texture = doggoLove\n              setTimeout(() => {\n                player.render.sprite.texture = doggo\n                won = undefined\n                if (j === Object.keys(domande).length) {\n                  bigBitch()\n                }\n              }, 2000)\n\n              punteggio++\n              Composite.remove(engine.world, punti)\n              punti = Bodies.rectangle(player.position.x, window.screen.height * 0.8, 1, 1, { isStatic: true, isSensor: true, render: { sprite: { texture: createImage(punteggio.toString(), 30, 30, type) } } })\n              punti.collisionFilter = {\n                'group': -1,\n                'category': 2,\n                'mask': 0,\n              }\n              Composite.add(engine.world, [punti])\n\n            }\n          }\n          catch (e) {\n            console.error(e)\n          }\n\n          checkedWon = true\n          if (!won) {\n\n            player.render.sprite.texture = doggoSad\n            document.dispatchEvent(rightAnswer)\n            var sad = document.querySelector(\".wrong\")\n            sad.volume = 1 * volume\n\n            if (volume !== 0) {\n              sad.play()\n            }\n            setTimeout(() => {\n              player.render.sprite.texture = doggo\n              won = false\n              if (j === Object.keys(domande).length) {\n                bigBitch()\n              }\n            }, 2000)\n          }\n        }\n\n        if (lastChild.position.x - player.position.x < window.screen.width / 3) {\n          Composite.remove(qr, [q])\n          Composite.translate(risp, { x: mov * speed, y: 0 })\n\n          if (Composite.allBodies(risp)[Composite.allBodies(risp).length - 1].position.x - player.position.x < 100) {\n            Composite.remove(qr, [risp])\n          }\n\n          if (lastChild.position.x < -100) {\n            Composite.remove(engine.world, [domanda])\n            checkedWon = false\n\n            if (j === Object.keys(domande).length) {\n              gameOver = true\n              started = false\n              clearInterval(update)\n              engine.gravity.y = 0\n              document.body.style.animationPlayState = \"paused\"\n              try {\n\n                for (var v = 0; v < document.styleSheets[2].cssRules.length; v++) {\n                  var newRule = document.styleSheets[2].cssRules[v].cssText.replace(\"running\", \"paused\")\n                  document.styleSheets[2].deleteRule(v)\n                  document.styleSheets[2].insertRule(newRule, v)\n                }\n\n              }\n\n              catch (error) {\n\n              }\n              setTimeout(() => {\n                swal.fire({\n                  title: \"La partita √® finita\",\n                  html: \"Il tuo punteggio √®: \" + punteggio + \"<br>Vuoi fare un'altra partita?\",\n                  icon: \"info\",\n                  showCancelButton: true,\n                  confirmButtonText: 'Daje annamoooooo',\n                  confirmButtonColor: '#5ca353',\n                  cancelButtonText: '¬°No gracias se√±ora!',\n                  color: 'white',\n                  background: '#373737',\n                  allowOutsideClick: false\n                })\n                  .then((result) => {\n\n                    if (result.value === true) {\n\n                      if (!guapeton && cumpleYaFestejado) {\n                        (async () => {\n                          domande = await getQuestions()\n                          start()\n                        })()\n                      }\n\n                      else {\n                        start()\n                      }\n                    }\n\n                    else {\n                      voluntary = true\n                      document.exitFullscreen()\n                      swal.fire({\n                        title: \"Se vedemo zi'\",\n                        html: \"Spero il gioco ti sia piaciuto\",\n                        showCancelButton: false,\n                        showConfirmButton: false,\n                        color: 'white',\n                        background: '#373737',\n                        allowOutsideClick: false\n                      })\n                      gameOver = true;\n                      try {\n                        Composite.remove(engine.world, [qr, domanda, punti, conto, player])\n                      }\n                      catch (error) {\n\n                      }\n                    }\n                  })\n              }, 2000)\n            }\n\n            domanda = Domanda({ screenHeight: window.screen.height, groundHeight: window.screen.height / 12.5, x: player.position.x + 2000, q: domande[\"domanda\" + j], scale: scale })\n            Composite.add(engine.world, [domanda])\n            sprite = createImage(domande[\"domanda\" + j].d, window.screen.width / 2 * 4 / 3, (window.screen.height / 50 * 49) / 4.5 * 0.3, type)\n            q = Bodies.rectangle(player.position.x, (window.screen.height / 50 * 49) / 4.5 * 0.3, window.screen.width / 2, (window.screen.height / 50 * 49) / 4.5 * 0.3, { isSensor: true, isStatic: true, render: { sprite: { texture: sprite } } })\n            q.collisionFilter = {\n              'group': -1,\n              'category': 2,\n              'mask': 0\n            }\n            Composite.add(qr, [q])\n\n            risp = getAnswers(domande[\"domanda\" + j], window.screen.height, window.screen.width, player.position.x, window.screen.height / 12.5, scale)\n            setTimeout(() => {\n              Composite.add(qr, [risp])\n            }, 1000)\n\n            j++\n          }\n        }\n\n      }, 1000 / 60)\n    }\n\n    document.addEventListener(\"click\", handleClick)\n    document.addEventListener(\"keypress\", handleClick)\n\n    document.addEventListener('rightanswer', (e) => {\n\n      var img = createImage(rispostaGiusta.r, 200 * 4 / 3, (window.screen.height - window.screen.height / 12.5) / 4.5 * 0.6, type, 'rgba(1, 255, 0, 0.32)', \"lol\")\n      var right = Bodies.rectangle(Composite.allBodies(domanda)[Composite.allBodies(domanda).length - 1].position.x, rispostaGiusta.pos, 200, (window.screen.height - window.screen.height / 12.5) / 4.5 * 0.6, { isStatic: true, isSensor: true, render: { sprite: { texture: img } } })\n      Composite.add(domanda, right)\n    })\n\n\n    document.addEventListener('visibilitychange', function () {\n      if (document.hidden) {\n\n        engine.gravity.y = 0\n        mov = 0\n      } else {\n\n        mov = -2\n        if (engine.gravity.y === 0) {\n          engine.gravity.y = 0.15 * scaleX\n        }\n      }\n    }, false);\n\n    function start() {\n      engine.gravity.y = 0\n      try {\n        Composite.remove(engine.world, [player, punti])\n      }\n      catch (error) {\n\n      }\n\n      player = Bodies.rectangle(window.screen.width / 3, window.screen.height / 2, 50 * scale, 37 * scale, { chamfer: { radius: 15 }, render: { sprite: { texture: doggo, xScale: scale, yScale: scale } } })\n      Body.setMass(player, 20 * scale)\n\n\n\n\n      Composite.add(engine.world, [player]);\n\n      domande = shuffleDomande(domande)\n\n      j = 1\n      if (l === 0) {\n        var go = setInterval(() => {\n\n          try {\n            Composite.remove(engine.world, [conto])\n          } catch (error) {\n            console.error(error);\n            // expected output: ReferenceError: nonExistentFunction is not defined\n            // Note - error messages will vary depending on browser\n          }\n\n          conto = Bodies.rectangle(window.screen.width / 2, window.screen.height / 2, window.screen.width / 4, window.screen.height / 4, { label: 'conto', isStatic: true, isSensor: true, render: { sprite: { texture: createImage((3 - l).toString(), window.screen.width / 4, window.screen.height / 4, 2) } } })\n          conto.collisionFilter = {\n            'group': -1,\n            'category': 2,\n            'mask': 0,\n          }\n\n          Composite.add(engine.world, conto)\n\n          if (l === 3) {\n\n            try {\n\n              for (var v = 0; v < document.styleSheets[2].cssRules.length; v++) {\n                var newRule = document.styleSheets[2].cssRules[v].cssText.replace(\"paused\", \"running\")\n                document.styleSheets[2].deleteRule(v)\n                document.styleSheets[2].insertRule(newRule, v)\n                console.log(document.styleSheets[2].cssRules[v].cssText)\n              }\n\n            }\n\n            catch (error) {\n\n            }\n            punteggio = 0\n\n            punti = Bodies.rectangle(player.position.x, player.position.y - 60, 1, 1, { isStatic: true, isSensor: true, render: { sprite: { texture: createImage(punteggio.toString(), 30, 30, type) } } })\n            punti.collisionFilter = {\n              'group': -1,\n              'category': 2,\n              'mask': 0,\n            }\n\n            Composite.add(engine.world, [punti])\n\n            gameOver = false\n            noClick = true\n            l = 0\n            won = false\n            justStarted = true\n            checkedWon = false\n\n            moveBitch()\n\n            clearInterval(go)\n            setTimeout(() => {\n              Composite.remove(engine.world, [conto])\n            }, 1000)\n          }\n\n          else {\n            l++\n          }\n        }, 1000)\n      }\n\n      else {\n\n      }\n      try {\n        Composite.remove(engine.world, [domanda, qr, punti, conto])\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    Events.on(engine, 'collisionStart', function (event) {\n      var pairs = event.pairs;\n\n\n\n      if (!pairs[0].bodyA.isSensor && !pairs[0].bodyB.isSensor && !gameOver && !alreadyTouched) {\n\n        alreadyTouched = true\n        gameIsOver()\n        setTimeout(() => {\n\n          swal.fire({\n            title: \"NOOOOOOO! Hai fatto male a guapet√≠n :(\",\n            html: \"Il tuo punteggio √®: \" + punteggio + \"<br>Chiudi questo messaggio per iniziare una nuova partita\",\n            icon: \"error\",\n            showCancelButton: true,\n            confirmButtonText: 'Daje annamoooooo',\n            confirmButtonColor: '#5ca353',\n            cancelButtonText: '¬°No gracias se√±ora!',\n            color: 'white',\n            background: '#373737',\n            allowOutsideClick: false\n          })\n            .then((result) => {\n\n              if (result.value === true) {\n                if (!guapeton && cumpleYaFestejado) {\n                  (async () => {\n                    domande = await getQuestions()\n                    start()\n                  })()\n                }\n\n                else {\n                  start()\n                }\n              }\n\n              else {\n                voluntary = true\n                document.exitFullscreen()\n                swal.fire({\n                  title: \"Se vedemo zi'\",\n                  html: \"Spero il gioco ti sia piaciuto\",\n                  showCancelButton: false,\n                  showConfirmButton: false,\n                  color: 'white',\n                  background: '#373737',\n                  allowOutsideClick: false\n                })\n                gameOver = true;\n                try {\n                  Composite.remove(engine.world, [qr, domanda, punti, conto, player])\n                }\n                catch (error) {\n\n                }\n              }\n            })\n\n          alreadyTouched = false\n          player.render.sprite.texture = doggo\n        }, 1000)\n\n        if (won) {\n          punteggio = punteggio - 1\n          Composite.remove(engine.world, punti)\n          punti = Bodies.rectangle(player.position.x, window.screen.height * 0.8, 1, 1, { isStatic: true, isSensor: true, render: { sprite: { texture: createImage(punteggio.toString(), 30, 30, type) } } })\n          punti.collisionFilter = {\n            'group': -1,\n            'category': 2,\n            'mask': 0,\n          }\n          Composite.add(engine.world, [punti])\n        }\n      }\n    });\n\n    Runner.run(engine);\n    Render.run(render);\n  }, [scena])\n\n  return (\n    <div ref={scena} className=\"canvas\" height=\"100vh\" width=\"100vh\" >\n      <audio className=\"cancion\" src={cancion} preload=\"auto\"></audio>\n      <audio className=\"win\" src={win} preload=\"auto\"></audio>\n      <audio className=\"jump\" src={jump} preload=\"auto\"></audio>\n      <audio className=\"gO\" src={gO} preload=\"auto\"></audio>\n      <audio className=\"wrong\" src={wrong} preload=\"auto\"></audio>\n      <audio className=\"purupu\" src={purupu} preload=\"auto\"></audio>\n      <img src={doggoLove} preload=\"auto\" hidden={true}></img>\n      <img src={doggoSad} preload=\"auto\" hidden={true}></img>\n      <img src={doggoDead} preload=\"auto\" hidden={true}></img>\n      <img src={pouroupou} preload=\"auto\" hidden={true}></img>\n    </div>\n  )\n}","C:\\Users\\xtart\\Downloads\\workflow\\jm\\guapeton\\src\\Domanda.js",[],[],{"ruleId":"51","severity":1,"message":"52","line":19,"column":8,"nodeType":"53","messageId":"54","endLine":19,"endColumn":16},{"ruleId":"51","severity":1,"message":"55","line":56,"column":7,"nodeType":"53","messageId":"54","endLine":56,"endColumn":10},{"ruleId":"51","severity":1,"message":"56","line":270,"column":7,"nodeType":"53","messageId":"54","endLine":270,"endColumn":13},{"ruleId":"51","severity":1,"message":"57","line":278,"column":7,"nodeType":"53","messageId":"54","endLine":278,"endColumn":14},{"ruleId":"51","severity":1,"message":"58","line":291,"column":18,"nodeType":"53","messageId":"54","endLine":291,"endColumn":27},{"ruleId":"51","severity":1,"message":"59","line":295,"column":7,"nodeType":"53","messageId":"54","endLine":295,"endColumn":12},{"ruleId":"60","severity":1,"message":"61","line":323,"column":14,"nodeType":"62","endLine":323,"endColumn":306},{"ruleId":"60","severity":1,"message":"63","line":411,"column":22,"nodeType":"64","endLine":411,"endColumn":26},{"ruleId":"60","severity":1,"message":"65","line":415,"column":21,"nodeType":"64","endLine":415,"endColumn":25},{"ruleId":"60","severity":1,"message":"66","line":420,"column":15,"nodeType":"64","endLine":420,"endColumn":16},{"ruleId":"60","severity":1,"message":"67","line":455,"column":28,"nodeType":"64","endLine":455,"endColumn":32},{"ruleId":"60","severity":1,"message":"68","line":475,"column":23,"nodeType":"64","endLine":475,"endColumn":28},{"ruleId":"60","severity":1,"message":"69","line":622,"column":31,"nodeType":"64","endLine":622,"endColumn":35},{"ruleId":"60","severity":1,"message":"70","line":643,"column":30,"nodeType":"64","endLine":643,"endColumn":35},{"ruleId":"60","severity":1,"message":"71","line":653,"column":21,"nodeType":"64","endLine":653,"endColumn":25},{"ruleId":"60","severity":1,"message":"72","line":671,"column":23,"nodeType":"62","endLine":671,"endColumn":210},{"ruleId":"60","severity":1,"message":"73","line":685,"column":24,"nodeType":"64","endLine":685,"endColumn":28},{"ruleId":"60","severity":1,"message":"74","line":847,"column":16,"nodeType":"62","endLine":847,"endColumn":206},{"ruleId":"60","severity":1,"message":"75","line":857,"column":11,"nodeType":"64","endLine":857,"endColumn":12},{"ruleId":"60","severity":1,"message":"76","line":869,"column":19,"nodeType":"62","endLine":869,"endColumn":309},{"ruleId":"60","severity":1,"message":"77","line":894,"column":25,"nodeType":"64","endLine":894,"endColumn":26},{"ruleId":"60","severity":1,"message":"78","line":906,"column":23,"nodeType":"64","endLine":906,"endColumn":27},{"ruleId":"60","severity":1,"message":"79","line":907,"column":17,"nodeType":"64","endLine":907,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":1026,"column":7,"nodeType":"82","endLine":1026,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":1027,"column":7,"nodeType":"82","endLine":1027,"endColumn":56},{"ruleId":"80","severity":1,"message":"81","line":1028,"column":7,"nodeType":"82","endLine":1028,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":1029,"column":7,"nodeType":"82","endLine":1029,"endColumn":57},"no-unused-vars","'loveComp' is defined but never used.","Identifier","unusedVar","'qst' is defined but never used.","'resize' is assigned a value but never used.","'noClick' is assigned a value but never used.","'setScaleX' is assigned a value but never used.","'World' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'ground' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'fullscreen' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'started' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'mov' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'gameOver' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'justStarted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'voluntary' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'alreadyTouched' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'won' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'punti' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'checkedWon' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'player' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'j' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'conto' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'punteggio' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'noClick' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'l' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]